networks:
  default:

services:
  orchestrator:
    container_name: "orama-orchestrator-${ENVIRONMENT}"
    build: 
      context: ./orchestrator
      dockerfile: Dockerfile
    image: oramaframework/orchestrator-${ENVIRONMENT}
    restart: always
    ports:
      - "${ORCHESTRATOR_PORT}:3200"
    volumes:
      - .${GCP_JSON_FILE}:${GCP_JSON_FILE}
      - ./use-cases:/use-cases
      - ./data/logs/provisions:/logs
      - ./data/provisions:/provisions
      - /usr/logs/orchestrator:/tmp/logs
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - REACT_APP_PORT=3200
      - REACT_APP_BACKEND_URL=${BACKEND_URL}
      - REACT_APP_BENCHMARKER_URL=${BENCHMARKER_URL}
      - REACT_APP_ORCHESTRATOR_URL=${ORCHESTRATOR_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - GCP_JSON_FILE=${GCP_JSON_FILE}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - ALICLOUD_ACCESS_KEY=${ALICLOUD_ACCESS_KEY}
      - ALICLOUD_SECRET_KEY=${ALICLOUD_SECRET_KEY}

  benchmarker:
    container_name: "orama-benchmarker-${ENVIRONMENT}"
    build: 
      context: ./benchmarker
      dockerfile: Dockerfile
    image: oramaframework/benchmarker-${ENVIRONMENT}
    restart: always
    ports:
      - "${BENCHMARKER_PORT}:3100"
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - REACT_APP_PORT=3100
      - REACT_APP_BACKEND_URL=${BACKEND_URL}
      - REACT_APP_BENCHMARKER_URL=${BENCHMARKER_URL}
      - REACT_APP_ORCHESTRATOR_URL=${ORCHESTRATOR_URL}
    volumes:
      - ./data/csvs:/csvs
      - ./data/reports:/reports
      - ./data/benchmarker:/results
      - ./benchmarker/plugins:/plugins
      - /usr/logs/benchmarker:/tmp/logs

  frontend:
    container_name: "orama-frontend-${ENVIRONMENT}"
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    image: oramaframework/frontend-${ENVIRONMENT}
    restart: always
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - REACT_APP_PORT=3000
      - REACT_APP_BACKEND_URL=${BACKEND_URL}
      - REACT_APP_BENCHMARKER_URL=${BENCHMARKER_URL}
      - REACT_APP_ORCHESTRATOR_URL=${ORCHESTRATOR_URL}
      - REACT_APP_HALSTEADER_URL=${HALSTEADER_URL}
      - REACT_APP_PREDICTOR_URL=${PREDICTOR_URL}
      
  backend:
    container_name: "orama-backend-${ENVIRONMENT}"
    build: 
      context: ./backend
      dockerfile: Dockerfile
    image: oramaframework/backend-${ENVIRONMENT}
    restart: always
    ports:
      - "${BACKEND_PORT}:3001"
    environment:
      - HOST=${HOSTNAME}
      - ENVIRONMENT=${ENVIRONMENT}
      - PORT=3001
      - DB_CLIENT=pg
      - KAFKA_URL=kafka:9092
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - DB_PORT=${DATABASE_PORT}
      - DB_HOST=${DATABASE_HOST}
      - REACT_APP_PORT=3001
      - REACT_APP_BACKEND_URL=${BACKEND_URL}
      - REACT_APP_BENCHMARKER_URL=${BENCHMARKER_URL}
      - REACT_APP_ORCHESTRATOR_URL=${ORCHESTRATOR_URL}
    volumes:
      - ./data/csvs:/csvs
      - ./data/jsons:/jsons
      - /usr/logs/backend:/tmp/logs
    links: 
        - database
    networks:
      default:
    depends_on:
        - kafka
          # condition: service_healthy
        
  database:
    image: postgres:13-alpine
    container_name: "orama-database-${ENVIRONMENT}"
    restart: always
    ports:
      - "${DATABASE_PORT}:5432" 
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./data/database:/var/lib/postgresql/data
    networks:
      default:
  zookeeper:
     container_name: "orama-zookeeper-${ENVIRONMENT}"
     image: docker.io/bitnami/zookeeper:3.8
     restart: always
     ports:
       - "${ZOOKEEPER_PORT}:2181"
     volumes:
       - "zookeeper_data:/bitnami"
     environment:
       - ALLOW_ANONYMOUS_LOGIN=yes
     networks:
       default:
  kafka:
     container_name: "orama-kafka-${ENVIRONMENT}"
     image: docker.io/bitnami/kafka:3.3
     restart: always
     ports:
       - "${KAFKA_PORT}:9092"
     volumes:
       - "kafka_data:/bitnami"
     environment:
       - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_URL}
      # - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://:${KAFKA_PORT}
      # - KAFKA_ENABLE_KRAFT=no
       - KAFKA_ADVERTISED_HOST_NAME=${KAFKA_HOST}
       - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
       - ALLOW_PLAINTEXT_LISTENER=yes
     depends_on:
       - zookeeper
     networks:
       default:
     healthcheck:
       test: ["CMD", "sleep", "15"]
       start_period: 15s
       interval: 1s
       timeout: 60s
       retries: 30
  benchmarker-worker:
    build: 
      context: ./benchmarker_worker
      dockerfile: Dockerfile
    image: oramaframework/benchmarker-worker
    restart: always
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - WORKER_NAME=${WORKER_NAME}
      - BACKEND_URL=${BACKEND_URL}
      - KAFKA_URL=${KAFKA_URL}
    depends_on:
       - backend
       - zookeeper
       - kafka
  predictor:
    container_name: "orama-predictor-${ENVIRONMENT}"
    ports:
      - "${PREDICTOR_PORT}:5000"
    build: 
      context: ./predictor
      dockerfile: Dockerfile
    image: oramaframework/predictor
    restart: always
  halsteader:
    container_name: "orama-halsteader-${ENVIRONMENT}"
    ports:
      - "5001:3000"
    build: 
      context: ./halsteader
      dockerfile: Dockerfile
    image: oramaframework/halsteader
    restart: always
volumes:
  zookeeper_data:
     driver: local
  kafka_data:
     driver: local
